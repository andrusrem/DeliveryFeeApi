// <auto-generated />
using DeliveryFeeApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using System.Diagnostics.CodeAnalysis;

#nullable disable

namespace DeliveryFeeApi.Migrations
{
    [ExcludeFromCodeCoverage]
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.2");

            modelBuilder.Entity("DeliveryFeeApi.Data.AirTemperatureExtraFee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("LowerTemperature")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("UpperTemperature")
                        .HasColumnType("TEXT");

                    b.Property<int>("VehicleType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("AirTemperatureExtraFees");
                });

            modelBuilder.Entity("DeliveryFeeApi.Data.RegionalBaseFee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("StationName")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VehicleType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("RegionalBaseFees");
                });

            modelBuilder.Entity("DeliveryFeeApi.Data.StationWeather", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("AirTemp")
                        .HasColumnType("TEXT");

                    b.Property<string>("StationName")
                        .HasColumnType("TEXT");

                    b.Property<long>("Timestamp")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("VmoCode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("WeatherPhenomenon")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("WindSpeed")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("StationWeathers");
                });

            modelBuilder.Entity("DeliveryFeeApi.Data.WeatherPhenomenonExtraFee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Forbitten")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("VehicleType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("WeatherPhenomenon")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("WeatherPhenomenonExtraFees");
                });

            modelBuilder.Entity("DeliveryFeeApi.Data.WindSpeedExtraFee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Forbitten")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("LowerSpeed")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Price")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("UpperSpeed")
                        .HasColumnType("TEXT");

                    b.Property<int>("VehicleType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("WindSpeedExtraFees");
                });
#pragma warning restore 612, 618
        }
    }
}
